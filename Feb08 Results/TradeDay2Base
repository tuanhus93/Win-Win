import sys
import shift
import time
import datetime


##Data Processing
def point(trader,stock):
    bp = trader.getBestPrice(stock)
    bid = bp.getBidPrice()
    ask = bp.getAskPrice()
    average=(bid+ask)/2
    return average

#High at index 0, low at index 1, open at 2, close at 3
def bar(data):
    data_bar = []
    high = max(data)
    data_bar.append(high)
    low = min(data)
    data_bar.append(low)
    open = data[0]
    data_bar.append(open)
    close = data[-1]
    data_bar.append(close)
    return data_bar


def conversion(high,low):
    max_bar = max(high[-9:])
    min_bar = min(low[-9:])
    con = (max_bar + min_bar) / 2
    return con


def base(high,low):
    max_bar = max(high[-26:])
    min_bar = min(low[-26:])
    base = (max_bar + min_bar) / 2
    return base

def leadingA(conversion, base):
    if len(conversion)<26:
        return
    return (conversion[-26] + base[-26]) / 2

def leadingB(high,low):
    if len(high)<52:
        return
    max_bar = max(high[:52])
    min_bar = min(low[:52])
    return (max_bar + min_bar) / 2


## Trading Decision
def strongsignal(con_line, base, A, B, symbol, trader, count):
    item = trader.getPortfolioItem(symbol)
    share = item.getShares()
    position = abs(share*item.getPrice())
    left = 30000 - position
    if con_line > base > A > B:
        order = trader.getOrderBook(symbol, shift.OrderBookType.GLOBAL_ASK, 1)[0]
        if share >= 0:
            if position >= 30000 or left < order.price*100:
                return count
            size = int(left/(100*order.price))
        else:
            size = abs(share)
        trader.submitOrder(shift.Order(shift.Order.MARKET_BUY, symbol, size))
        count += 1

    elif con_line < base < A < B:
        order = trader.getOrderBook(symbol, shift.OrderBookType.GLOBAL_BID, 1)[0]
        # Dont want to execute short trade, only offset long position
        if share <= 0:
            if position >= 30000 or left < order.price * 100:
                return count
            size = int(left / (100 * order.price))
        #if share == 0:
            #return count
        else:
            size = abs(share)
            print("Offsetting long position by shorting %6s" % (symbol))
        trader.submitOrder(shift.Order(shift.Order.MARKET_SELL, symbol, size))
        count += 1
    return count

def weak_1(con_line ,base,symbol ,trader, count):
    if con_line[0] < con_line[1] and base[1] <= base[0] and con_line[0] < base[0]:
        if con_line[2] > base[2] and con_line[3] > base[3]:
            trader.submitOrder(shift.Order(shift.Order.MARKET_BUY, symbol, 1))
            count+=1
            print("WEAK BUY 1")
    elif con_line[0] > con_line[1] and base[1] >= base[0] and con_line[0] > base[0]:
        if con_line[2] < base[2] and con_line[3] < base[3]:
            trader.submitOrder(shift.Order(shift.Order.MARKET_SELL, symbol, 1))
            count += 1
            print("WEAK SELL 1")
    return count

# Pass the last 5 close lead A lead B
def weak_2(close, A, B, symbol, trader, count):
    if close[0] < close[1] and close[1] >= max(A[1], B[1]) and close[0] < max(A[0], B[0]) and max(close) == close[5]:
        if close[2] >= max(A[2], B[2]) and close[3] >= max(A[3], B[3]) and close[4] >= max(A[4], B[4]) and close[5] >= max(A[5], B[5]):
            trader.submitOrder(shift.Order(shift.Order.MARKET_BUY, symbol, 1))
            count += 1
            print("WEAK BUY 2")
    elif close[0] > close[1] and close[1] <= min(A[1], B[1]) and close[0] > min(A[0], B[0]) and min(close) == close[5]:
        if close[2] <= min(A[2], B[2]) and close[3] <= min(A[3], B[3]) and close[4] <= min(A[4], B[4]) and close[5] <= min(A[5], B[5]):
            trader.submitOrder(shift.Order(shift.Order.MARKET_SELL, symbol, 1))
            count += 1
            print("WEAK SELL 2")
    return count


#close is the vector of the last 52 close
# size of con_line & base = 4
# size of A, B = 6
def controller(close, con_line, base, A, B, symbol, trader, count):
    strongsignal(con_line[-1], base[-1], A[-1], B[-1], symbol, trader, count)
    if max(close)>max(A[-1], B[-1]):
        return count
    elif min(close)<min(A[-1], B[-1]):
        return count
    weak_1(con_line[-4:],base[-4:],symbol ,trader, count)
    weak_2(close[-6:], A[-6:], B[-6:], symbol, trader, count)
    return count

##Termination Process

def kill_everything(trader, count):
    try:
        for item in trader.getPortfolioItems().values():
            while item.getShares!=0:
                if item.getShares() > 0:
                    sell = shift.Order(shift.Order.MARKET_SELL, item.getSymbol(), int(item.getShares() / 100))
                    trader.submitOrder(sell)
                    count+=1
                elif item.getShares() < 0:
                    buy = shift.Order(shift.Order.MARKET_BUY, item.getSymbol(), -int(item.getShares() / 100))
                    trader.submitOrder(buy)
                    count+=1
    except Exception as e:
        print(e)
    return count

def fulfill_trades(trader, count,stocklist):
    try:
        while count < 10:
            buy = shift.Order(shift.Order.MARKET_BUY, stocklist[0], 1)
            trader.submitOrder(buy)
            sell = shift.Order(shift.Order.MARKET_SELL, stocklist[0], 1)
            trader.submitOrder(sell)
            count += 2

    except Exception as e:
        print(e)

    return count

#remove huge loss position
def kill_it(trader, item, count):
    try:
        if item.getShares() > 0:
            sell = shift.Order(shift.Order.MARKET_SELL, item.getSymbol(), int(item.getShares() / 100))
            trader.submitOrder(sell)
            count+=1
        elif item.getShares() < 0:
            buy = shift.Order(shift.Order.MARKET_BUY, item.getSymbol(), -int(item.getShares() / 100))
            trader.submitOrder(buy)
            count+=1

    except Exception as e:
        print(e)
    return count

#use kill_it to check the portfolio
def check_single_pl(trader, blocklist, count):
    try:
        for item in trader.getPortfolioItems().values():
            if item.getRealizedPL() < -2000:
                count=kill_it(trader, item, count)
                blocklist[item.getSymbol()]=1
    except Exception as e:
        print(e)

    return count

#check total loss
def check_total_pl(trader, count, stocklist):
    try:
        if trader.getPortfolioSummary().getTotalRealizedPL() < -10000:
            kill_everything(trader, count)
            fulfill_trades(trader,count,stocklist)
            return True

    except Exception as e:
        print(e)

    return False


# Portfolio Print
def portfolio(trader,blocklist,timer):
    time.sleep(0.1)
    print("Portfolio after hour: %3.2f" % (timer / 3600))
    print("Buying Power\tTotal Shares\tTotal P&L\tTimestamp")
    print("%12.2f\t%12d\t%9.2f\t%26s" % (trader.getPortfolioSummary().getTotalBP(),
                                         trader.getPortfolioSummary().getTotalShares(),
                                         trader.getPortfolioSummary().getTotalRealizedPL(),
                                         trader.getPortfolioSummary().getTimestamp()))
    print("The following equities are on the blocklist:")
    print(*blocklist)
    print()

    print("Symbol\t\tShares\t\tPrice\t\tP&L\t\tTimestamp")
    for item in trader.getPortfolioItems().values():
        print("%6s\t\t%6d\t%9.2f\t%7.2f\t\t%26s" %
              (item.getSymbol(), item.getShares(), item.getPrice(), item.getRealizedPL(), item.getTimestamp()))

    return

#Trade Print
def trade_print(data, trader, stock_list):
    for s in stock_list:
        item=trader.getPortfolioItem(s)
        new_share=item.getShares()-data[s][0][0]
        if new_share==0:
            continue
        new_price=(item.getShares()*item.getPrice()-data[s][0][0]*data[s][0][1])/new_share
        if new_share!=0:
            print("%s has %d for %f"%(s, new_share,new_price))
        data[s]=[(item.getShares(),item.getPrice())]
    return data

def main(argv):
    trader=shift.Trader("winwin")
    try:
        trader.connect("initiator.cfg", "E46Cgsvn3g3dunmc")
        trader.subAllOrderBook()
    except shift.IncorrectPassword as e:
        print(e)
    except shift.ConnectionTimeout as e:
        print(e)

    stocklist = ["MMM", "AXP", "AAPL", "BA", "CAT", "CVX", "CSCO", "KO", "DIS", "DWDP", "XOM","GS","HD","IBM","INTC","JNJ","JPM","MCD", "MRK", "MSFT", "NKE", "PFE", "PG", "TRV", "UTX", "UNH", "VZ", "V","WMT","WBA"]
    trade_list={}
    high_bars = {}
    low_bars = {}
    close_bars = {}
    con_line = {}
    base_line = {}
    leadA = {}
    leadB = {}
    timer = 0
    start = 105*60 #put number of minutes * 60
    end = 380*60 #put numer of minutes *60
    data_point = {}
    count = 0
    blocklist = {}


    for s in stocklist:
        trade_list[s]=[(0,0)]

    while True:
        while True:
            # adding timer to check
            timer += 10
            time.sleep(9.9)
            # getting data point each 10 sec
            for s in stocklist:
                now = datetime.datetime.now()
                if s not in data_point.keys():
                    data_point[s] = [point(trader, s)]
                else:
                    data_point[s].append(point(trader,s))

            # making a data bar from 6 data points
                if len(data_point[s]) == 6:
                    temp_bar=bar(data_point[s])
                    if s not in high_bars.keys():
                        high_bars[s] = [temp_bar[0]]
                        low_bars[s] = [temp_bar[1]]
                        close_bars[s] = [temp_bar[3]]
                    else:
                        high_bars[s].append(temp_bar[0])
                        low_bars[s].append(temp_bar[1])
                        close_bars[s].append(temp_bar[3])

                    # clear out the memory
                    data_point[s].clear()

            #
            if timer % 1800 == 0:
                portfolio(trader, blocklist, timer)
            trade_list = trade_print(trade_list, trader, stocklist)

            # stop gathering data to do data analysis
            if stocklist[-1] in low_bars.keys():
                if len(low_bars[stocklist[-1]]) == 78:
                    break



        # DATA ANALYSIS
        for s in stocklist:
            now = datetime.datetime.now()
            if s not in leadA.keys():
                con_line[s] = [conversion(high_bars[s], low_bars[s])]
                base_line[s] = [base(high_bars[s], low_bars[s])]
                leadA[s] = [leadingA(con_line[s], base_line[s])]
                leadB[s] = [leadingB(high_bars[s], low_bars[s])]
            else:
                con_line[s].append(conversion(high_bars[s], low_bars[s]))
                base_line[s].append(base(high_bars[s], low_bars[s]))
                leadA[s].append(leadingA(con_line[s], base_line[s]))
                leadB[s].append(leadingB(high_bars[s], low_bars[s]))

            # Trading execution
            if len(con_line[s]) == 32:
                # only trade after 2 hours
                if timer >= start:
                    count = controller(close_bars[s], con_line[s], base_line[s], leadA[s], leadB[s], s, trader, count)

                con_line[s].pop(0)
                base_line[s].pop(0)
                leadA[s].pop(0)
                leadB[s].pop(0)

            # remove oldest data point for optimization
            high_bars[s].pop(0)
            low_bars[s].pop(0)
            close_bars[s].pop(0)

        # checking single item in portfolio
        count = check_single_pl(trader, blocklist, count)

        # termination check for pl
        if check_total_pl(trader, count, stocklist):
            print("Killed by check_total_pl")
            break

        # termination check for time and trade count
        if timer == end:
            count = kill_everything(trader, count)
            print("Killed by kill_everything")
            if count < 10:
                fulfill_trades(trader, count, stocklist)
                break
            break


    portfolio(trader,blocklist, timer)

    trader.disconnect()

    return


if __name__ == "__main__":
    main(sys.argv)
